{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\crud_with_full_frontend\\\\frontend\\\\src\\\\components\\\\StudentDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getNotesByStudentId } from '../services/noteService';\nimport AddNote from './AddNote'; // Import AddNote component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Retrieve the student ID from the URL\n  const [notes, setNotes] = useState([]); // State for notes\n\n  // Function to fetch notes for the student\n  const fetchNotes = async () => {\n    try {\n      const data = await getNotesByStudentId(id); // Call the API to fetch notes\n      setNotes(data); // Update the notes state\n    } catch (error) {\n      console.error('Error fetching notes:', error);\n    }\n  };\n\n  // Fetch notes when the component mounts or the ID changes\n  useEffect(() => {\n    fetchNotes();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Student Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Course Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Grade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: notes.map(note => /*#__PURE__*/_jsxDEV(\"tr\", {\n          style: {\n            backgroundColor: note.grade > 10 ? 'lightgreen' : 'lightcoral' // Apply conditional styling\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: note.courseName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: note.grade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, note.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddNote, {\n      refreshNotes: fetchNotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(StudentDetails, \"cffW6yQ8dGFqHVRjDpSgyK94/3A=\", false, function () {\n  return [useParams];\n});\n_c = StudentDetails;\nexport default StudentDetails;\nvar _c;\n$RefreshReg$(_c, \"StudentDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getNotesByStudentId","AddNote","jsxDEV","_jsxDEV","StudentDetails","_s","id","notes","setNotes","fetchNotes","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","note","style","backgroundColor","grade","courseName","refreshNotes","_c","$RefreshReg$"],"sources":["D:/Downloads/crud_with_full_frontend/frontend/src/components/StudentDetails.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getNotesByStudentId } from '../services/noteService';\nimport AddNote from './AddNote'; // Import AddNote component\n\nconst StudentDetails = () => {\n    const { id } = useParams(); // Retrieve the student ID from the URL\n    const [notes, setNotes] = useState([]); // State for notes\n\n    // Function to fetch notes for the student\n    const fetchNotes = async () => {\n        try {\n            const data = await getNotesByStudentId(id); // Call the API to fetch notes\n            setNotes(data); // Update the notes state\n        } catch (error) {\n            console.error('Error fetching notes:', error);\n        }\n    };\n\n    // Fetch notes when the component mounts or the ID changes\n    useEffect(() => {\n        fetchNotes();\n    }, [id]);\n\n    return (\n        <div>\n            <h1>Student Notes</h1>\n\n            {/* Notes Table */}\n            <table>\n                <thead>\n                <tr>\n                    <th>Course Name</th>\n                    <th>Grade</th>\n                </tr>\n                </thead>\n                <tbody>\n                {notes.map((note) => (\n                    <tr\n                        key={note.id}\n                        style={{\n                            backgroundColor: note.grade > 10 ? 'lightgreen' : 'lightcoral', // Apply conditional styling\n                        }}\n                    >\n                        <td>{note.courseName}</td>\n                        <td>{note.grade}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n\n            {/* Add Note Form */}\n            <AddNote refreshNotes={fetchNotes} /> {/* Pass fetchNotes as a prop */}\n        </div>\n    );\n};\n\nexport default StudentDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}