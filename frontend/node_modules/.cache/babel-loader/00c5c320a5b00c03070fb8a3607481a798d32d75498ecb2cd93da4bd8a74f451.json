{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\crud_with_full_frontend\\\\frontend\\\\src\\\\components\\\\AddNote.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { addNote } from '../services/noteService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddNote = ({\n  refreshNotes\n}) => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get the student ID from the URL\n  const [courseName, setCourseName] = useState('');\n  const [grade, setGrade] = useState('');\n  const handleAdd = async () => {\n    if (!courseName || !grade) {\n      alert('Please fill out all fields.');\n      return;\n    }\n    await addNote(id, courseName, parseFloat(grade));\n    alert('Note added successfully!');\n    setCourseName('');\n    setGrade('');\n    refreshNotes(); // Refresh notes list\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: courseName,\n      onChange: e => setCourseName(e.target.value),\n      placeholder: \"Enter course name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: grade,\n      onChange: e => setGrade(e.target.value),\n      placeholder: \"Enter grade\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAdd,\n      children: \"Add Note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(AddNote, \"4xnAPncBik9muKsHqDeAuXtvbXs=\", false, function () {\n  return [useParams];\n});\n_c = AddNote;\nexport default AddNote;\nvar _c;\n$RefreshReg$(_c, \"AddNote\");","map":{"version":3,"names":["React","useState","useParams","addNote","jsxDEV","_jsxDEV","AddNote","refreshNotes","_s","id","courseName","setCourseName","grade","setGrade","handleAdd","alert","parseFloat","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Downloads/crud_with_full_frontend/frontend/src/components/AddNote.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { addNote } from '../services/noteService';\r\n\r\nconst AddNote = ({ refreshNotes }) => {\r\n    const { id } = useParams(); // Get the student ID from the URL\r\n    const [courseName, setCourseName] = useState('');\r\n    const [grade, setGrade] = useState('');\r\n\r\n    const handleAdd = async () => {\r\n        if (!courseName || !grade) {\r\n            alert('Please fill out all fields.');\r\n            return;\r\n        }\r\n        await addNote(id, courseName, parseFloat(grade));\r\n        alert('Note added successfully!');\r\n        setCourseName('');\r\n        setGrade('');\r\n        refreshNotes(); // Refresh notes list\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Add Note</h2>\r\n            <input\r\n                type=\"text\"\r\n                value={courseName}\r\n                onChange={(e) => setCourseName(e.target.value)}\r\n                placeholder=\"Enter course name\"\r\n            />\r\n            <input\r\n                type=\"number\"\r\n                value={grade}\r\n                onChange={(e) => setGrade(e.target.value)}\r\n                placeholder=\"Enter grade\"\r\n            />\r\n            <button onClick={handleAdd}>Add Note</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddNote;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,OAAO,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI,CAACJ,UAAU,IAAI,CAACE,KAAK,EAAE;MACvBG,KAAK,CAAC,6BAA6B,CAAC;MACpC;IACJ;IACA,MAAMZ,OAAO,CAACM,EAAE,EAAEC,UAAU,EAAEM,UAAU,CAACJ,KAAK,CAAC,CAAC;IAChDG,KAAK,CAAC,0BAA0B,CAAC;IACjCJ,aAAa,CAAC,EAAE,CAAC;IACjBE,QAAQ,CAAC,EAAE,CAAC;IACZN,YAAY,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACIF,OAAA;IAAAY,QAAA,gBACIZ,OAAA;MAAAY,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBhB,OAAA;MACIiB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEb,UAAW;MAClBc,QAAQ,EAAGC,CAAC,IAAKd,aAAa,CAACc,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,WAAW,EAAC;IAAmB;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFhB,OAAA;MACIiB,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAEX,KAAM;MACbY,QAAQ,EAAGC,CAAC,IAAKZ,QAAQ,CAACY,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC;IAAa;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFhB,OAAA;MAAQuB,OAAO,EAAEd,SAAU;MAAAG,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEd,CAAC;AAACb,EAAA,CAnCIF,OAAO;EAAA,QACMJ,SAAS;AAAA;AAAA2B,EAAA,GADtBvB,OAAO;AAqCb,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}